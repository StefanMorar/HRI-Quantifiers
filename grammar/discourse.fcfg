## Based on Natural Language Toolkit: discourse.fcfg (Author: Ewan Klein <ewan@inf.ed.ac.uk>)

% start S
############################
# Grammar Rules
#############################

S[SEM = <app(?subj,?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<app(?det,?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]
Nom[NUM=?n,SEM=<app(?adj,?nom)>] -> Adj[NUM=?n,SEM=?adj] N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=<app(?v,?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]

#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,SEM=<\P.P(Robot)>] -> 'Robot'

Det[NUM=sg,SEM=<\P Q.exists x.(P(x) -> Q(x))>] -> 'a' | 'A'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all' | 'All'

N[NUM=sg,SEM=<\x.box(x)>] -> 'box'
N[NUM=pl,SEM=<\x.box(x)>] -> 'boxes'

Adj[SEM=<\P x.(red(x) & P(x))>] -> 'red'

TV[NUM=sg,SEM=<\X y.X(\x.move(Robot,x))>,tns=pres] -> 'move'