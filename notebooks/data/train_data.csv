"prompt","completion"
"Fetch onion","{'type':'command','expressions':[['|exists x1 (onion(x1)).| >= 1']],'commands':['robot(x0) & onion(x1) -> fetch(x0, x1).']}"
"Fetch a carrot","{'type':'command','expressions':[['|exists x1 (carrot(x1)).| >= 1']],'commands':['robot(x0) & carrot(x1) -> fetch(x0, x1).']}"
"FETCH A CARROT","{'type':'command','expressions':[['|exists x1 (carrot(x1)).| >= 1']],'commands':['robot(x0) & carrot(x1) -> fetch(x0, x1).']}"
"Fetch 2 avocados","{'type':'command','expressions':[['|exists x1 (avocado(x1)).| >= 2']],'commands':['robot(x0) & avocado(x1) -> fetch(x0, x1).']}"
"Get exactly 2 avocados","{'type':'command','expressions':[['|exists x1 (avocado(x1)).| >= 2']],'commands':['robot(x0) & avocado(x1) -> fetch(x0, x1).']}"
"Fetch at least 2 bananas","{'type':'command','expressions':[['|exists x1 (banana(x1)).| >= 2']],'commands':['robot(x0) & banana(x1) -> fetch(x0, x1).']}"
"Get at least 2 pieces of baking sheet","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 2']],'commands':['robot(x0) & bakingSheet(x1) -> fetch(x0, x1).']}"
"Fetch a few bananas","{'type':'command','expressions':[['|exists x1 (banana(x1)).| >= 3']],'commands':['robot(x0) & banana(x1) -> fetch(x0, x1).']}"
"Get few tomatoes","{'type':'command','expressions':[['|exists x1 (tomato(x1)).| >= 2']],'commands':['robot(x0) & tomato(x1) -> fetch(x0, x1).']}"
"Bring exactly seven bananas","{'type':'command','expressions':[['|exists x1 (banana(x1)).| >= 7']],'commands':['robot(x0) & banana(x1) -> fetch(x0, x1).']}"
"Fetch at least two eggs","{'type':'command','expressions':[['|exists x1 (egg(x1)).| >= 2']],'commands':['robot(x0) & egg(x1) -> fetch(x0, x1).']}"
"Put three cooking knives on the counter","{'type':'command','expressions':[['|exists x1 (cookingKnife(x1)).| >= 3']],'commands':['robot(x0) & cookingKnife(x1) -> fetch(x0, x1).']}"
"Put 12 eggs on the counter","{'type':'command','expressions':[['|exists x1 (egg(x1)).| >= 12']],'commands':['robot(x0) & egg(x1) -> fetch(x0, x1).']}"
"Bring me 19 broccoli stems","{'type':'command','expressions':[['|exists x1 (broccoliStem(x1)).| >= 19']],'commands':['robot(x0) & broccoliStem(x1) -> fetch(x0, x1).']}"
"Go fetch around 20 broccoli stems","{'type':'command','expressions':[['|exists x1 (broccoliStem(x1)).| >= 20']],'commands':['robot(x0) & broccoliStem(x1) -> fetch(x0, x1).']}"
"Please fetch ten tomatoes","{'type':'command','expressions':[['|exists x1 (tomato(x1)).| >= 10']],'commands':['robot(x0) & tomato(x1) -> fetch(x0, x1).']}"
"Bring a cookie on the kitchen counter","{'type':'command','expressions':[['|exists x1 (cookie(x1)).| >= 1']],'commands':['robot(x0) & cookie(x1) -> fetch(x0, x1).']}"
"Hello, fetch some potatoes","{'type':'command','expressions':[['|exists x1 (potato(x1)).| >= 4']],'commands':['robot(x0) & potato(x1) -> fetch(x0, x1).']}"
"Fetch some red chili peppers","{'type':'command','expressions':[['|exists x1 (redChiliPepper(x1)).| >= 4']],'commands':['robot(x0) & redChiliPepper(x1) -> fetch(x0, x1).']}"
"get some baking sheets","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 4']],'commands':['robot(x0) & bakingSheet(x1) -> fetch(x0, x1).']}"
"fetch several potatoes","{'type':'command','expressions':[['|exists x1 (potato(x1)).| >= 5']],'commands':['robot(x0) & potato(x1) -> fetch(x0, x1).']}"
"Bring several avocados","{'type':'command','expressions':[['|exists x1 (avocado(x1)).| >= 5']],'commands':['robot(x0) & avocado(x1) -> fetch(x0, x1).']}"
"Fetch many bananas","{'type':'command','expressions':[['|exists x1 (banana(x1)).| >= 10']],'commands':['robot(x0) & banana(x1) -> fetch(x0, x1).']}"
"Fetch a lot of bananas","{'type':'command','expressions':[['|exists x1 (banana(x1)).| >= 10']],'commands':['robot(x0) & banana(x1) -> fetch(x0, x1).']}"
"Get three carrots","{'type':'command','expressions':[['|exists x1 (carrot(x1)).| >= 3']],'commands':['robot(x0) & carrot(x1) -> fetch(x0, x1).']}"
"Fetch 7 bread slices","{'type':'command','expressions':[['|exists x1 (breadSlice(x1)).| >= 7']],'commands':['robot(x0) & breadSlice(x1) -> fetch(x0, x1).']}"
"Fetch a broccoli stem","{'type':'command','expressions':[['|exists x1 (broccoliStem(x1)).| >= 1']],'commands':['robot(x0) & broccoliStem(x1) -> fetch(x0, x1).']}"
"Get a few red onions","{'type':'command','expressions':[['|exists x1 (redOnion(x1)).| >= 3']],'commands':['robot(x0) & redOnion(x1) -> fetch(x0, x1).']}"
"fetch a few vegetables","{'type':'command','expressions':[['|exists x1 (vegetable(x1)).| >= 3']],'commands':['robot(x0) & vegetable(x1) -> fetch(x0, x1).']}"
"FETCH FEW POTATOES","{'type':'command','expressions':[['|exists x1 (potato(x1)).| >= 2']],'commands':['robot(x0) & potato(x1) -> fetch(x0, x1).']}"
"Get a half a dozen eggs","{'type':'command','expressions':[['|exists x1 (egg(x1)).| >= 6']],'commands':['robot(x0) & egg(x1) -> fetch(x0, x1).']}"
"Get half of the vegetables","{'type':'command','expressions':[['|exists x1 (vegetable(x1)).| / 2']],'commands':['robot(x0) & vegetable(x1) -> fetch(x0, x1).']}"
"Fetch half peeled red onions","{'type':'command','expressions':[['|exists x1 (peeledRedOnion(x1)).| / 2']],'commands':['robot(x0) & peeledRedOnion(x1) -> fetch(x0, x1).']}"
"Could you fetch a dozen eggs please?","{'type':'command','expressions':[['|exists x1 (egg(x1)).| >= 12']],'commands':['robot(x0) & egg(x1) -> fetch(x0, x1).']}"
"Could you fetch 4 bowls?","{'type':'command','expressions':[['|exists x1 (bowl(x1)).| >= 4']],'commands':['robot(x0) & bowl(x1) -> fetch(x0, x1).']}"
"Robot, could you fetch 3 bowls?","{'type':'command','expressions':[['|exists x1 (bowl(x1)).| >= 3']],'commands':['robot(x0) & bowl(x1) -> fetch(x0, x1).']}"
"Fetch Onion1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> fetch(x0, Onion1).']}"
"Robot, fetch Onion1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> fetch(x0, Onion1).']}"
"Fetch red onion Onion1","{'type':'command','expressions':[[]],'commands':['robot(x0) & redOnion(Onion1) -> fetch(x0, Onion1).']}"
"Fetch cooking knife called Knife1","{'type':'command','expressions':[[]],'commands':['robot(x0) & cookingKnife(Knife1) -> fetch(x0, Knife1).']}"
"Fetch large bowl LB1","{'type':'command','expressions':[[]],'commands':['robot(x0) & largeBowl(LB1) -> fetch(x0, LB1).']}"
"Fetch LB1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> fetch(x0, LB1).']}"
"Get Onion2","{'type':'command','expressions':[[]],'commands':['robot(x0) -> fetch(x0, Onion2).']}"
"Get onion redOnion21","{'type':'command','expressions':[[]],'commands':['robot(x0) & onion(RedOnion21) -> fetch(x0, RedOnion21).']}"
"Fetch RedOnion1 and CookingKnife","{'type':'command','expressions':[[],[]],'commands':['robot(x0) -> fetch(x0, RedOnion1).','robot(x0) -> fetch(x0, CookingKnife).']}"
"Fetch bowls LargeBowl1 and LargeBowl2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & bowl(LargeBowl1) -> fetch(x0, LargeBowl1).','robot(x0) & bowl(LargeBowl2) -> fetch(x0, LargeBowl2).']}"
"Fetch tomato cherryTomato and onion redOnion12","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & tomato(CherryTomato) -> fetch(x0, CherryTomato).','robot(x0) & onion(RedOnion12) -> fetch(x0, RedOnion12).']}"
"Go get LargeBowl1 and LargeBowl2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) -> fetch(x0, LargeBowl1).','robot(x0) -> fetch(x0, LargeBowl2).']}"
"Fetch LargeBowl1 and LargeBowl1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> fetch(x0, LargeBowl1).']}"
"Fetch LargeBowl1, cookingKnife1 and BakingTray","{'type':'command','expressions':[[],[],[]],'commands':['robot(x0) -> fetch(x0, LargeBowl1).','robot(x0) -> fetch(x0, CookingKnife1).', 'robot(x0) -> fetch(x0, BakingTray).']}"
"Fetch a couple of red chili peppers","{'type':'command','expressions':[['|exists x1 (redChiliPepper(x1)).| >= 2']],'commands':['robot(x0) & redChiliPepper(x1) -> fetch(x0, x1).']}"
"Fetch all onions","{'type':'command','expressions':[['|exists x1 (onion(x1)).|']],'commands':['robot(x0) & onion(x1) -> fetch(x0, x1).']}"
"Get all mangoes you can find","{'type':'command','expressions':[['|exists x1 (mango(x1)).|']],'commands':['robot(x0) & mango(x1) -> fetch(x0, x1).']}"
"Fetch every red onion you see","{'type':'command','expressions':[['|exists x1 (redOnion(x1)).|']],'commands':['robot(x0) & redOnion(x1) -> fetch(x0, x1).']}"
"Bring every pepper","{'type':'command','expressions':[['|exists x1 (pepper(x1)).|']],'commands':['robot(x0) & pepper(x1) -> fetch(x0, x1).']}"
"Fetch most carrots","{'type':'command','expressions':[['|exists x1 (carrot(x1)).| / 2 + 1']],'commands':['robot(x0) & carrot(x1) -> fetch(x0, x1).']}"
"Fetch half of the red peppers","{'type':'command','expressions':[['|exists x1 (redPepper(x1)).| / 2']],'commands':['robot(x0) & redPepper(x1) -> fetch(x0, x1).']}"
"Fetch majority of onions","{'type':'command','expressions':[['|exists x1 (onion(x1)).| / 2 + 1']],'commands':['robot(x0) & onion(x1) -> fetch(x0, x1).']}"
"Get the majority of bread slices","{'type':'command','expressions':[['|exists x1 (breadSlice(x1)).| / 2 + 1']],'commands':['robot(x0) & breadSlice(x1) -> fetch(x0, x1).']}"
"Bake the baking tray","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 1']],'commands':['robot(x0) & bakingTray(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Please bake a baking tray in an oven","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 1','|exists x2 (oven(x2)).| >= 1']],'commands':['robot(x0) & bakingTray(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Please cook a tray in an oven placing it afterwards on a kitchen counter","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 1','|exists x2 (oven(x2)).| >= 1','|exists x3 (kitchenCounter(x3)).| >= 1']],'commands':['robot(x0) & bakingTray(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Bake a baking tray in Oven1","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 1']],'commands':['robot(x0) & bakingTray(x1) & kitchenCounter(x3) -> bake(x0, x1, Oven1, x3).']}"
"Bake a baking tray in oven Oven1","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 1']],'commands':['robot(x0) & bakingTray(x1) & oven(Oven1) & kitchenCounter(x3) -> bake(x0, x1, Oven1, x3).']}"
"Bake Tray1 in Oven1","{'type':'command','expressions':[[]],'commands':['robot(x0) & kitchenCounter(x3) -> bake(x0, Tray1, Oven1, x3).']}"
"Cook baking tray Tray1 in oven Oven1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(Tray1) & oven(Oven1) & kitchenCounter(x3) -> bake(x0, Tray1, Oven1, x3).']}"
"Now bake baking tray Tray1 in Oven1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(Tray1) & kitchenCounter(x3) -> bake(x0, Tray1, Oven1, x3).']}"
"Could you bake baking tray Tray1, please?","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(Tray1) & oven(x2) & kitchenCounter(x3) -> bake(x0, Tray1, x2, x3).']}"
"Bake baking tray Tray1 in an oven","{'type':'command','expressions':[['|exists x2 (oven(x2)).| >= 1']],'commands':['robot(x0) & bakingTray(Tray1) & oven(x2) & kitchenCounter(x3) -> bake(x0, Tray1, x2, x3).']}"
"Bake a large bowl","{'type':'command','expressions':[['|exists x1 (largeBowl(x1)).| >= 1']],'commands':['robot(x0) & largeBowl(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Bake baking tray Tray1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(Tray1) & oven(x2) & kitchenCounter(x3) -> bake(x0, Tray1, x2, x3).']}"
"Cook tray Tray1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(Tray1) & oven(x2) & kitchenCounter(x3) -> bake(x0, Tray1, x2, x3).']}"
"Bake Tray1","{'type':'command','expressions':[[]],'commands':['robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, Tray1, x2, x3).']}"
"Bake Tray1 in an oven","{'type':'command','expressions':[['|exists x2 (oven(x2)).| >= 1']],'commands':['robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, Tray1, x2, x3).']}"
"Bake BakingTray1","{'type':'command','expressions':[[]],'commands':['robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, BakingTray1, x2, x3).']}"
"cook bt1","{'type':'command','expressions':[[]],'commands':['robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, Bt1, x2, x3).']}"
"cook bakingTray1 in oven2","{'type':'command','expressions':[[]],'commands':['robot(x0) & kitchenCounter(x3) -> bake(x0, BakingTray1, Oven2, x3).']}"
"Cook tray BakingTray1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(BakingTray1) & oven(x2) & kitchenCounter(x3) -> bake(x0, BakingTray1, x2, x3).']}"
"Bake BakingTray1 and put it on Counter2","{'type':'command','expressions':[[]],'commands':['robot(x0) & oven(x2) -> bake(x0, BakingTray1, x2, Counter2).']}"
"Bake tray1 and put it on a kitchen counter","{'type':'command','expressions':[['|exists x3 (kitchenCounter(x3)).| >= 1']],'commands':['robot(x0) & oven(x2) -> bake(x0, Tray1, x2, x3).']}"
"Cook tray BakingTray1 and put it on kitchen counter Counter2","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(BakingTray1) & oven(x2) & kitchenCounter(Counter2) -> bake(x0, BakingTray1, x2, Counter2).']}"
"Bake BakingTray1 and LargeBowl1","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, BakingTray1, x2, x3).','robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, LargeBowl1, x2, x3).']}"
"Bake BakingTray1 and LargeBowl1 in oven Oven1","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & oven(Oven1) & kitchenCounter(x3) -> bake(x0, BakingTray1, Oven1, x3).','robot(x0) & oven(Oven1) & kitchenCounter(x3) -> bake(x0, LargeBowl1, Oven1, x3).']}"
"Bake BT1 in oven Oven1 and LB1 in oven Oven2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & oven(Oven1) & kitchenCounter(x3) -> bake(x0, BT1, Oven1, x3).','robot(x0) & oven(Oven2) & kitchenCounter(x3) -> bake(x0, LB1, Oven2, x3).']}"
"Bake BakingTray1 in Oven1 and LargeBowl1 in Oven2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & kitchenCounter(x3) -> bake(x0, BakingTray1, Oven1, x3).','robot(x0) & kitchenCounter(x3) -> bake(x0, LargeBowl1, Oven2, x3).']}"
"Bake BakingTray1 and LargeBowl1 in Oven1","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & kitchenCounter(x3) -> bake(x0, BakingTray1, Oven1, x3).','robot(x0) & kitchenCounter(x3) -> bake(x0, LargeBowl1, Oven1, x3).']}"
"Bake BakingTray1, BakingTray2 and LargeBowl1","{'type':'command','expressions':[[],[],[]],'commands':['robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, BakingTray1, x2, x3).','robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, BakingTray2, x2, x3).','robot(x0) & oven(x2) & kitchenCounter(x3) -> bake(x0, LargeBowl1, x2, x3).']}"
"Bake 2 baking trays","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 2']],'commands':['robot(x0) & bakingTray(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Cook three baking trays","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 3']],'commands':['robot(x0) & bakingTray(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Put the large bowl in the oven","{'type':'command','expressions':[['|exists x1 (largeBowl(x1)).| >= 1','|exists x2 (oven(x2)).| >= 1']],'commands':['robot(x0) & largeBowl(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Bake 4 baking trays","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 4']],'commands':['robot(x0) & bakingTray(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Bake many baking trays","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 10']],'commands':['robot(x0) & bakingTray(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Cook several trays","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 5']],'commands':['robot(x0) & bakingTray(x1) & oven(x2) & kitchenCounter(x3) -> bake(x0, x1, x2, x3).']}"
"Cook several trays in Oven1","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 5']],'commands':['robot(x0) & bakingTray(x1) & kitchenCounter(x3) -> bake(x0, x1, Oven1, x3).']}"
"Cook a few baking trays in oven Oven1","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 3']],'commands':['robot(x0) & bakingTray(x1) & oven(Oven1) & kitchenCounter(x3) -> bake(x0, x1, Oven1, x3).']}"
"Cut an onion","{'type':'command','expressions':[['|exists x1 (onion(x1)).| >= 1']],'commands':['robot(x0) & onion(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Chope half a dozen onions","{'type':'command','expressions':[['|exists x1 (onion(x1)).| >= 6']],'commands':['robot(x0) & onion(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Please go and cut some onions","{'type':'command','expressions':[['|exists x1 (onion(x1)).| >= 4']],'commands':['robot(x0) & onion(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut several broccoli","{'type':'command','expressions':[['|exists x1 (broccoli(x1)).| >= 5']],'commands':['robot(x0) & broccoli(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut some broccoli","{'type':'command','expressions':[['|exists x1 (broccoli(x1)).| >= 4']],'commands':['robot(x0) & broccoli(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Chope 7 onions","{'type':'command','expressions':[['|exists x1 (onion(x1)).| >= 7']],'commands':['robot(x0) & onion(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Chope 5 onions with a knife","{'type':'command','expressions':[['|exists x1 (onion(x1)).| >= 5','|exists x2 (cookingKnife(x2)).| >= 1']],'commands':['robot(x0) & onion(x1) & cookingKnife(x2) -> cut(x0, x1, x2).']}"
"Chope many apples","{'type':'command','expressions':[['|exists x1 (apple(x1)).| >= 10']],'commands':['robot(x0) & apple(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut many apples with any cutting tool","{'type':'command','expressions':[['|exists x1 (apple(x1)).| >= 10','|exists x2 (cuttingTool(x2)).| >= 1']],'commands':['robot(x0) & apple(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Chope few pears with a cutting tool","{'type':'command','expressions':[['|exists x1 (pear(x1)).| >= 2','|exists x2 (cuttingTool(x2)).| >= 1']],'commands':['robot(x0) & pear(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut 5 red chili peppers with a cooking knife","{'type':'command','expressions':[['|exists x1 (redChiliPepper(x1)).| >= 5','|exists x2 (cookingKnife(x2)).| >= 1']],'commands':['robot(x0) & redChiliPepper(x1) & cookingKnife(x2) -> cut(x0, x1, x2).']}"
"Cut several bananas with a knife","{'type':'command','expressions':[['|exists x1 (banana(x1)).| >= 5','|exists x2 (cookingKnife(x2)).| >= 1']],'commands':['robot(x0) & banana(x1) & cookingKnife(x2) -> cut(x0, x1, x2).']}"
"Cut 2 breads with cookingKnife1","{'type':'command','expressions':[['|exists x1 (bread(x1)).| >= 2']],'commands':['robot(x0) & bread(x1) -> cut(x0, x1, CookingKnife1).']}"
"Slice 3 peppers with CookingKnife15","{'type':'command','expressions':[['|exists x1 (pepper(x1)).| >= 2']],'commands':['robot(x0) & pepper(x1) -> cut(x0, x1, CookingKnife15).']}"
"Cut 2 breads using cutting tool cookingKnife1","{'type':'command','expressions':[['|exists x1 (bread(x1)).| >= 2']],'commands':['robot(x0) & bread(x1) & cuttingTool(CookingKnife1) -> cut(x0, x1, CookingKnife1).']}"
"Hi again, now cut many tomatoes using CookingKnife1","{'type':'command','expressions':[['|exists x1 (tomato(x1)).| >= 10']],'commands':['robot(x0) & tomato(x1) -> cut(x0, x1, CookingKnife1).']}"
"Next cut 1 mango using cooking knife Knife1","{'type':'command','expressions':[['|exists x1 (mango(x1)).| >= 1']],'commands':['robot(x0) & mango(x1) & cookingKnife(Knife1) -> cut(x0, x1, Knife1).']}"
"Please cut brownOnion1 with cookingKnife1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> cut(x0, BrownOnion1, CookingKnife1).']}"
"Slice some bananas with a knife","{'type':'command','expressions':[['|exists x1 (banana(x1)).| >= 4','|exists x2 (cookingKnife(x2)).| >= 1']],'commands':['robot(x0) & banana(x1) & cookingKnife(x2) -> cut(x0, x1, x2).']}"
"Slice brownOnion1 with cookingKnife1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> cut(x0, BrownOnion1, CookingKnife1).']}"
"Cut Onion1","{'type':'command','expressions':[[]],'commands':['robot(x0) & cuttingTool(x2) -> cut(x0, Onion1, x2).']}"
"Chope BrownOnion5","{'type':'command','expressions':[[]],'commands':['robot(x0) & cuttingTool(x2) -> cut(x0, BrownOnion5, x2).']}"
"Please cut redOnion12 now","{'type':'command','expressions':[[]],'commands':['robot(x0) & cuttingTool(x2) -> cut(x0, RedOnion12, x2).']}"
"Cut Onion1 and Onion2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & cuttingTool(x2) -> cut(x0, Onion1, x2).','robot(x0) & cuttingTool(x2) -> cut(x0, Onion2, x2).']}"
"Cut Onion1 and Onion2 with KnifeOne","{'type':'command','expressions':[[],[]],'commands':['robot(x0) -> cut(x0, Onion1, KnifeOne).','robot(x0) -> cut(x0, Onion2, KnifeOne).']}"
"Cut Onion1 and Onion2 with knife KnifeOne","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & cookingKnife(KnifeOne) -> cut(x0, Onion1, KnifeOne).','robot(x0) & cookingKnife(KnifeOne) -> cut(x0, Onion2, KnifeOne).']}"
"Cut Onion1, RedOnion2 and BrownOnion1","{'type':'command','expressions':[[],[],[]],'commands':['robot(x0) & cuttingTool(x2) -> cut(x0, Onion1, x2).','robot(x0) & cuttingTool(x2) -> cut(x0, RedOnion2, x2).','robot(x0) & cuttingTool(x2) -> cut(x0, BrownOnion1, x2).']}"
"Chope onions o1 and o2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & onion(O1) & cuttingTool(x2) -> cut(x0, O1, x2).','robot(x0) & onion(O2) & cuttingTool(x2) -> cut(x0, O2, x2).']}"
"Cut all onions","{'type':'command','expressions':[['|exists x1 (onion(x1)).|']],'commands':['robot(x0) & onion(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut a couple of onions","{'type':'command','expressions':[['|exists x1 (onion(x1)).| >= 2']],'commands':['robot(x0) & onion(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut onion1 with any cutting tool","{'type':'command','expressions':[['|exists x2 (cuttingTool(x2)).| >= 1']],'commands':['robot(x0) & cuttingTool(x2) -> cut(x0, Onion1, x2).']}"
"Chope red onion Onion1","{'type':'command','expressions':[[]],'commands':['robot(x0) & redOnion(Onion1) & cuttingTool(x2) -> cut(x0, Onion1, x2).']}"
"Chope red chili pepper Pepper23","{'type':'command','expressions':[[]],'commands':['robot(x0) & redChiliPepper(Pepper23) & cuttingTool(x2) -> cut(x0, Pepper23, x2).']}"
"Cut sixteen carrots","{'type':'command','expressions':[['|exists x1 (carrot(x1)).| >= 16']],'commands':['robot(x0) & carrot(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut a dozen potatoes","{'type':'command','expressions':[['|exists x1 (potato(x1)).| >= 12']],'commands':['robot(x0) & potato(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut few green chili peppers","{'type':'command','expressions':[['|exists x1 (greenChiliPepper(x1)).| >= 2']],'commands':['robot(x0) & greenChiliPepper(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Cut a few red chili peppers","{'type':'command','expressions':[['|exists x1 (redChiliPepper(x1)).| >= 3']],'commands':['robot(x0) & redChiliPepper(x1) & cuttingTool(x2) -> cut(x0, x1, x2).']}"
"Use a knife to cut several green chili peppers","{'type':'command','expressions':[['|exists x1 (greenChiliPepper(x1)).| >= 5','|exists x2 (cookingKnife(x2)).| >= 1']],'commands':['robot(x0) & greenChiliPepper(x1) & cookingKnife(x2) -> cut(x0, x1, x2).']}"
"Line a baking sheet on a baking tray","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line the baking tray","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line both baking trays","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 2','|exists x2 (bakingTray(x2)).| >= 2']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line a baking tray with paper","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line all trays","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).|','|exists x2 (bakingTray(x2)).|']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line all baking trays","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).|','|exists x2 (bakingTray(x2)).|']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line that baking tray","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line BakingTray1 with baking sheet","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) -> line(x0, x1, BakingTray1).']}"
"Line tray Tray1 with baking paper","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(Tray1) -> line(x0, x1, Tray1).']}"
"Line tray BakingTray1 with paper","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(BakingTray1) -> line(x0, x1, BakingTray1).']}"
"Line BakingTray10","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) -> line(x0, x1, BakingTray10).']}"
"Line Tray12","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) -> line(x0, x1, Tray12).']}"
"cover bt24","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) -> line(x0, x1, Bt24).']}"
"Line tray BakingTray1 with sheet BakingSheet2","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingSheet(BakingSheet2) & bakingTray(BakingTray1) -> line(x0, BakingSheet2, BakingTray1).']}"
"Line tray BakingTray1 with BakingSheet2","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(BakingTray1) -> line(x0, BakingSheet2, BakingTray1).']}"
"Line BakingTray1 with BakingSheet2","{'type':'command','expressions':[[]],'commands':['robot(x0) -> line(x0, BakingSheet2, BakingTray1).']}"
"Line a tray with BakingSheet2","{'type':'command','expressions':[['|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingTray(x2) -> line(x0, BakingSheet2, x2).']}"
"Line a tray with sheet BakingSheet2","{'type':'command','expressions':[['|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingSheet(BakingSheet2) & bakingTray(x2) -> line(x0, BakingSheet2, x2).']}"
"Cover Tray1 with Sheet2","{'type':'command','expressions':[[]],'commands':['robot(x0) -> line(x0, Sheet2, Tray1).']}"
"Cover Tray1 with baking sheet Sheet22","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingSheet(Sheet22) -> line(x0, Sheet22, Tray1).']}"
"With Sheet2 cover Tray1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> line(x0, Sheet2, Tray1).']}"
"Using Sheet2 cover tray Tray1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(Tray1) -> line(x0, Sheet2, Tray1).']}"
"Line trays Tray1, Tray2 with sheets Sheet1 and Sheet2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & bakingSheet(Sheet1) & bakingTray(Tray1) -> line(x0, Sheet1, Tray1).','robot(x0) & bakingSheet(Sheet2) & bakingTray(Tray2) -> line(x0, Sheet2, Tray2).']}"
"Line Tray1 with Sheet1 and Tray2 with Sheet2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) -> line(x0, Sheet1, Tray1).','robot(x0) -> line(x0, Sheet2, Tray2).']}"
"Line several baking trays","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 5','|exists x2 (bakingTray(x2)).| >= 5']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line some baking trays","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 4','|exists x2 (bakingTray(x2)).| >= 4']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line a couple baking trays","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 2','|exists x2 (bakingTray(x2)).| >= 2']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Cover a baking tray with a baking sheet","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Cover a tray with a baking sheet","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Cover Tray2 with a sheet","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 1'],'commands':['robot(x0) & bakingSheet(x1) -> line(x0, x1, Tray2).']}"
"Cover 3 trays with paper","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 3','|exists x2 (bakingTray(x2)).| >= 3']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Cover many trays with baking sheets","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 10','|exists x2 (bakingTray(x2)).| >= 10']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Cover many trays","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 10','|exists x2 (bakingTray(x2)).| >= 10']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line a few baking trays","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 3','|exists x2 (bakingTray(x2)).| >= 3']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Line a few trays with paper","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 3','|exists x2 (bakingTray(x2)).| >= 3']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Cover few trays with paper","{'type':'command','expressions':[['|exists x1 (bakingSheet(x1)).| >= 2','|exists x2 (bakingTray(x2)).| >= 2']],'commands':['robot(x0) & bakingSheet(x1) & bakingTray(x2) -> line(x0, x1, x2).']}"
"Mix the contents of the bowl using a whisk","{'type':'command','expressions':[['|exists x1 (bowl(x1)).| >= 1','|exists x2 (whisk(x2)).| >= 1']],'commands':['robot(x0) & bowl(x1) & whisk(x2) -> mix(x0, x1, x2).']}"
"Blend the contents of the bowl using a whisk","{'type':'command','expressions':[['|exists x1 (bowl(x1)).| >= 1','|exists x2 (whisk(x2)).| >= 1']],'commands':['robot(x0) & bowl(x1) & whisk(x2) -> mix(x0, x1, x2).']}"
"Mix a large bowl","{'type':'command','expressions':[['|exists x1 (largeBowl(x1)).| >= 1']],'commands':['robot(x0) & largeBowl(x1) & whisk(x2) -> mix(x0, x1, x2).']}"
"Mix 2 large bowls","{'type':'command','expressions':[['|exists x1 (largeBowl(x1)).| >= 2']],'commands':['robot(x0) & largeBowl(x1) & whisk(x2) -> mix(x0, x1, x2).']}"
"Mix 2 medium bowls with whisk Whisk1","{'type':'command','expressions':[['|exists x1 (mediumBowl(x1)).| >= 2']],'commands':['robot(x0) & mediumBowl(x1) & whisk(Whisk1) -> mix(x0, x1, Whisk1).']}"
"Blend 2 bowls with Whisk1","{'type':'command','expressions':[['|exists x1 (bowl(x1)).| >= 2']],'commands':['robot(x0) & bowl(x1) -> mix(x0, x1, Whisk1).']}"
"Mix LargeBowl1","{'type':'command','expressions':[[]],'commands':['robot(x0) & whisk(x2) -> mix(x0, LargeBowl1, x2).']}"
"Mix LargeBowl1 with whisk Whisk1","{'type':'command','expressions':[[]],'commands':['robot(x0) & whisk(Whisk1) -> mix(x0, LargeBowl1, Whisk1).']}"
"Mix LargeBowl2 with Whisk1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> mix(x0, LargeBowl2, Whisk1).']}"
"blend bowl2 with a whisk","{'type':'command','expressions':[['|exists x2 (whisk(x2)).| >= 1']],'commands':['robot(x0) & whisk(x2) -> mix(x0, LargeBowl2, x2).']}"
"Mix LargeBowl9 using whisk Whisk1","{'type':'command','expressions':[[]],'commands':['robot(x0) & whisk(Whisk1) -> mix(x0, LargeBowl9, Whisk1).']}"
"blend LargeBowl19 using whisk with name Whisk2","{'type':'command','expressions':[[]],'commands':['robot(x0) & whisk(Whisk2) -> mix(x0, LargeBowl19, Whisk2).']}"
"Blend LargeBowl1 with Whisk1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> mix(x0, LargeBowl1, Whisk1).']}"
"Mix LargeBowl1 and LargeBowl2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & whisk(x2) -> mix(x0, LargeBowl1, x2).','robot(x0) & whisk(x2) -> mix(x0, LargeBowl2, x2).']}"
"Mix b1 and b2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & whisk(x2) -> mix(x0, B1, x2).','robot(x0) & whisk(x2) -> mix(x0, B2, x2).']}"
"Mix LB1, LB2 and LB3","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & whisk(x2) -> mix(x0, LB1, x2).','robot(x0) & whisk(x2) -> mix(x0, LB2, x2).','robot(x0) & whisk(x2) -> mix(x0, LB3, x2).']}"
"Mix bowls LargeBowl1 and LargeBowl2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & bowl(LargeBowl1) & whisk(x2) -> mix(x0, x1, LargeBowl1).','robot(x0) & bowl(LargeBowl2) & whisk(x2) -> mix(x0, x1, LargeBowl2).']}"
"Mix bowl","{'type':'command','expressions':[['|exists x1 (bowl(x1)).| >= 1']],'commands':['robot(x0) & bowl(x1) & whisk(x2) -> mix(x0, x1, x2).']}"
"Mix all bowls","{'type':'command','expressions':[['|exists x1 (bowl(x1)).|']],'commands':['robot(x0) & bowl(x1) & whisk(x2) -> mix(x0, x1, x2).']}"
"Mix every large bowl","{'type':'command','expressions':[['|exists x1 (largeBowl(x1)).|']],'commands':['robot(x0) & largeBowl(x1) & whisk(x2) -> mix(x0, x1, x2).']}"
"Mix all bowls with a whisk","{'type':'command','expressions':[['|exists x1 (bowl(x1)).|,'|exists x2 (whisk(x2)).| >= 1']],'commands':['robot(x0) & bowl(x1) & whisk(x2) -> mix(x0, x1, x2).']}"
"Mix contents of LargeBowl1 with Whisk1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> mix(x0, LargeBowl1, Whisk1).']}"
"Mix contents of LargeBowl1 with whisk Whisk1","{'type':'command','expressions':[[]],'commands':['robot(x0) & whisk(Whisk1) -> mix(x0, LargeBowl1, Whisk1).']}"
"Mix bowl LargeBowl1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bowl(LargeBowl1) & whisk(x2) -> mix(x0, LargeBowl1, x2).']}"
"Blend bowl LargeBowl1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bowl(LargeBowl1) & whisk(x2) -> mix(x0, LargeBowl1, x2).']}"
"Blend bowl named largeBowl1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bowl(LargeBowl1) & whisk(x2) -> mix(x0, LargeBowl1, x2).']}"
"Move contents of MediumBowl1 to MediumBowl2","{'type':'command','expressions':[[]],'commands':['robot(x0) -> transfer(x0, MediumBowl1, MediumBowl2).']}"
"Transfer MediumBowl1 to LargeBowl2","{'type':'command','expressions':[[]],'commands':['robot(x0) -> transfer(x0, MediumBowl1, LargeBowl2).']}"
"Transfer bowl MediumBowl1 to LargeBowl2","{'type':'command','expressions':[[]],'commands':['robot(x0) & bowl(MediumBowl1) -> transfer(x0, MediumBowl1, LargeBowl2).']}"
"transfer bt2 to bt4","{'type':'command','expressions':[[]],'commands':['robot(x0) -> transfer(x0, Bt2, Bt4).']}"
"Transfer bowl smallBowl1 to another bowl largeBowl21","{'type':'command','expressions':[[]],'commands':['robot(x0) & bowl(SmallBowl1) & bowl(LargeBowl21) -> transfer(x0, SmallBowl1, LargeBowl21).']}"
"Transfer bowl B1 to tray T1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bowl(B1) & bakingTray(T1) -> transfer(x0, B1, T1).']}"
"Transfer bowl B1 to any baking tray","{'type':'command','expressions':[['|exists x2 (bakingTray(x2)).| >= 1]']],'commands':['robot(x0) & bowl(B1) & bakingTray(x2) -> transfer(x0, B1, x2).']}"
"Transfer contents of MediumBowl1 to MediumBowl2","{'type':'command','expressions':[[]],'commands':['robot(x0) -> transfer(x0, MediumBowl1, MediumBowl2).']}"
"Move contents of medium bowl mediumBowl01 to mediumBowl02","{'type':'command','expressions':[[]],'commands':['robot(x0) & mediumBowl(MediumBowl01) -> transfer(x0, MediumBowl1, MediumBowl02).']}"
"Shift bowl MediumBowl1 to a baking tray","{'type':'command','expressions':[['|exists x2 (bakingTray(x2)).'| >= 1]],'commands':['robot(x0) & bowl(MediumBowl1) & bakingTray(x2) -> transfer(x0, MediumBowl1, x2).']}"
"Transfer contents of MediumBowl1 and LargeBowl5 to MediumBowl2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) -> transfer(x0, MediumBowl1, MediumBowl2).','robot(x0) -> transfer(x0, LargeBowl5, MediumBowl2).']}"
"Transfer SmallBowl1, smallBowl2 and mediumBowl1 to LargeBowl2","{'type':'command','expressions':[[],[],[]],'commands':['robot(x0) -> transfer(x0, SmallBowl1, LargeBowl2).','robot(x0) -> transfer(x0, SmallBowl2, LargeBowl2).','robot(x0) -> transfer(x0, MediumBowl1, LargeBowl2).']}"
"Shift the contents of MediumBowl1 to MediumBowl2","{'type':'command','expressions':[[]],'commands':['robot(x0) -> transfer(x0, MediumBowl1, MediumBowl2).']}"
"Transfer contents of MediumBowl1 to another bowl","{'type':'command','expressions':[['|exists x2 (bowl(x2)).| >= 1']],'commands':['robot(x0) & bowl(x2) -> transfer(x0, MediumBowl1, x2).']}"
"Transfer contents from mediumBowl1 to a large bowl","{'type':'command','expressions':[['|exists x2 (largeBowl(x2)).| >= 1']],'commands':['robot(x0) & largeBowl(x2) -> transfer(x0, MediumBowl1, x2).']}"
"Transfer the contents of bowl Bowl1 to a medium bowl","{'type':'command','expressions':[['|exists x2 (mediumBowl(x2)).| >= 1']],'commands':['robot(x0) & bowl(Bowl1) & mediumBowl(x2) -> transfer(x0, Bowl1, x2).']}"
"Sprinkle powdered sugar over the baking tray","{'type':'command','expressions':[['|exists x1 (powderedSugar(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & powderedSugar(x1) & bakingTray(x2) -> sprinkle(x0, x1, x2).']}"
"Sprinkle powdered sugar over BakingTray1","{'type':'command','expressions':[['|exists x1 (powderedSugar(x1)).| >= 1']],'commands':['robot(x0) & powderedSugar(x1) -> sprinkle(x0, x1, BakingTray1).']}"
"Sprinkle powdered sugar over tray Tray1","{'type':'command','expressions':[['|exists x1 (powderedSugar(x1)).| >= 1']],'commands':['robot(x0) & powderedSugar(x1) & bakingTray(Tray1) -> sprinkle(x0, x1, Tray1).']}"
"Sprinkle powdered sugar over some trays","{'type':'command','expressions':[['|exists x1 (powderedSugar(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 4']],'commands':['robot(x0) & powderedSugar(x1) & bakingTray(x2) -> sprinkle(x0, x1, x2).']}"
"Sprinkle powdered sugar over many trays","{'type':'command','expressions':[['|exists x1 (powderedSugar(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 10']],'commands':['robot(x0) & powderedSugar(x1) & bakingTray(x2) -> sprinkle(x0, x1, x2).']}"
"Sprinkle powdered sugar PS1 over many trays","{'type':'command','expressions':[['|exists x2 (bakingTray(x2)).| >= 10']],'commands':['robot(x0) & powderedSugar(PS1) & bakingTray(x2) -> sprinkle(x0, PS1, x2).']}"
"Dust Sugar1 over many trays","{'type':'command','expressions':[['|exists x2 (bakingTray(x2)).| >= 10']],'commands':['robot(x0) & bakingTray(x2) -> sprinkle(x0, Sugar1, x2).']}"
"Sprinkle powdered sugar over a few trays","{'type':'command','expressions':[['|exists x1 (powderedSugar(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 3']],'commands':['robot(x0) & powderedSugar(x1) & bakingTray(x2) -> sprinkle(x0, x1, x2).']}"
"Dust powdered sugar over tray Tray1","{'type':'command','expressions':[['|exists x1 (powderedSugar(x1)).| >= 1']],'commands':['robot(x0) & powderedSugar(x1) & bakingTray(Tray1) -> sprinkle(x0, x1, Tray1).']}"
"Sprinkle the contents of PowderedSugar1 over BakingTray1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> sprinkle(x0, PowderedSugar1, BakingTray1).']}"
"Sprinkle powdered sugar PS1 over BT1","{'type':'command','expressions':[[]],'commands':['robot(x0) & powderedSugar(PS1) -> sprinkle(x0, PS1, BT1).']}"
"Sprinkle the contents of powdered sugar PS1 over BT1 and BT2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & powderedSugar(PS1) -> sprinkle(x0, PS1, BT1).','robot(x0) & powderedSugar(PS1) -> sprinkle(x0, PS1, BT2).']}"
"Dust PS1 over BT1 and BT2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) -> sprinkle(x0, PS1, BT1).','robot(x0) -> sprinkle(x0, PS1, BT2).']}"
"Sprinkle PS1 over baking tray Tray1","{'type':'command','expressions':[[]],'commands':['robot(x0) & bakingTray(Tray1) -> sprinkle(x0, PS1, Tray1).']}"
"Dust SugarBag1 over bowls Bowl3 and Bowl2","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & bowl(Bowl3) -> sprinkle(x0, SugarBag1, Bowl3).','robot(x0) & bowl(Bowl2) -> sprinkle(x0, SugarBag1, Bowl2).']}"
"Sprinkle powdered sugar over BT1 and BT2","{'type':'command','expressions':[['|exists x1 (powderedSugar(x1)).| >= 1'],['|exists x1 (powderedSugar(x1)).| >= 1']],'commands':['robot(x0) & powderedSugar(PS1) -> sprinkle(x0, PS1, BT1).','robot(x0) & powderedSugar(PS1) -> sprinkle(x0, PS1, BT2).']}"
"Shape contents of bowl and place the results into a baking tray","{'type':'command','expressions':[['|exists x1 (bowl(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bowl(x1) & bakingTray(x2) -> shape(x0, x1, x2).']}"
"Shape LargeBowl1 into clumps and place them into a baking tray","{'type':'command','expressions':[['|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingTray(x2) -> shape(x0, LargeBowl1, x2).']}"
"Mold LargeBowl1 into clumps and place them into a bowl","{'type':'command','expressions':[['|exists x2 (bowl(x2)).| >= 1']],'commands':['robot(x0) & bowl(x2) -> shape(x0, LargeBowl1, x2).']}"
"Shape bowl LargeBowl1 into clumps and place them into a medium bowl","{'type':'command','expressions':[['|exists x2 (mediumBowl(x2)).| >= 1']],'commands':['robot(x0) & bowl(LargeBowl1) & mediumBowl(x2) -> shape(x0, LargeBowl1, x2).']}"
"Shape LargeBowl1 and put everything in another bowl","{'type':'command','expressions':[['|exists x2 (bowl(x2)).| >= 1']],'commands':['robot(x0) & bowl(x2) -> shape(x0, LargeBowl1, x2).']}"
"mold LargeBowl1 and put the results in another bowl","{'type':'command','expressions':[['|exists x2 (bowl(x2)).| >= 1']],'commands':['robot(x0) & bowl(x2) -> shape(x0, LargeBowl1, x2).']}"
"Shape bowl LargeBowl1 into clumps and place them into a baking tray","{'type':'command','expressions':[['|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bowl(LargeBowl1) & bakingTray(x2) -> shape(x0, LargeBowl1, x2).']}"
"Mold largeBowl1 and put it inside bakingTray1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> shape(x0, LargeBowl1, BakingTray1).']}"
"Shape largeBowl1 and mediumBowl5 and put them inside bakingTray1","{'type':'command','expressions':[[],[]],'commands':['robot(x0) -> shape(x0, LargeBowl1, BakingTray1).','robot(x0) -> shape(x0, MediumBowl5, BakingTray1).']}"
"Shape bowls largeBowl1 and mediumBowl5 and put them inside bakingTray1","{'type':'command','expressions':[[],[]],'commands':['robot(x0) & bowl(LargeBowl1) -> shape(x0, LargeBowl1, BakingTray1).','robot(x0) & bowl(MediumBowl5) -> shape(x0, MediumBowl5, BakingTray1).']}"
"Shape LB2 and LB5 and put the results in T1","{'type':'command','expressions':[[],[]],'commands':['robot(x0) -> shape(x0, LB2, T1).','robot(x0) -> shape(x0, LB5, T1).']}"
"Mold LargeBowl1 and put the clumps into BakingTray1","{'type':'command','expressions':[[]],'commands':['robot(x0) -> shape(x0, LargeBowl1, BakingTray1).']}"
"Shape 2 baking trays and put the clumps into baking tray","{'type':'command','expressions':[['|exists x1 (bakingTray(x1)).| >= 1','|exists x2 (bakingTray(x2)).| >= 1']],'commands':['robot(x0) & bakingTray(x1) & bakingTray(x2)-> shape(x0, x1, x2).']}"
"Most vegetables are red onions","{'type':'query','expressions':['|exists x0 (vegetable(x0) & redOnion(x0)).| > |exists x0 (vegetable(x0) & -redOnion(x0)).|']}"
"Most of the ingredients are vegetables","{'type':'query','expressions':['|exists x0 (ingredient(x0) & vegetable(x0)).| > |exists x0 (ingredient(x0) & -vegetable(x0)).|']}"
"Most cutting tools are cooking knives","{'type':'query','expressions':['|exists x0 (cuttingTool(x0) & cookingKnife(x0)).| > |exists x0 (cuttingTool(x0) & -cookingKnife(x0)).|']}"
"Majority of cutting tools are knives","{'type':'query','expressions':['|exists x0 (cuttingTool(x0) & cookingKnife(x0)).| > |exists x0 (cuttingTool(x0) & -cookingKnife(x0)).|']}"
"Majority of peppers are green chili peppers","{'type':'query','expressions':['|exists x0 (pepper(x0) & greenChiliPepper(x0)).| > |exists x0 (pepper(x0) & -greenChiliPepper(x0)).|']}"
"It is not true that the majority of peppers are red chili peppers","{'type':'query','expressions':['|exists x0 (pepper(x0) & redChiliPepper(x0)).| < |exists x0 (pepper(x0) & -redChiliPepper(x0)).|']}"
"More than half of the peppers are red peppers","{'type':'query','expressions':['|exists x0 (pepper(x0) & redPepper(x0)).| > |exists x0 (pepper(x0) & -redPepper(x0)).|']}"
"At least half the vegetables are brown onions","{'type':'query','expressions':['|exists x0 (vegetable(x0) & brownOnion(x0)).| >= |exists x0 (vegetable(x0) & -brownOnion(x0)).|']}"
"Less than half of the peppers are green peppers","{'type':'query','expressions':['|exists x0 (pepper(x0) & greenPepper(x0)).| < |exists x0 (pepper(x0) & -greenPepper(x0)).|']}"
"There are twice as many onions than carrots","{'type':'query','expressions':['|exists x0 (onion(x0)).| == 2 * |exists x0 (carrot(x0)).|']}"
"There are two kitchen counters","{'type':'query','expressions':['|exists x0 (kitchenCounter(x0)).| >= 2']}"
"There are not two kitchen counters","{'type':'query','expressions':['|exists x0 (kitchenCounter(x0)).| != 2']}"
"The number of peppers is not 10","{'type':'query','expressions':['|exists x0 (pepper(x0)).| != 10']}"
"The number of peppers is not exactly twelve","{'type':'query','expressions':['|exists x0 (pepper(x0)).| != 12']}"
"There are exactly 2 ovens","{'type':'query','expressions':['|exists x0 (oven(x0)).| == 2']}"
"There are exactly 4 bowls","{'type':'query','expressions':['|exists x0 (bowl(x0)).| == 4']}"
"exactly 1 oven","{'type':'query','expressions':['|exists x0 (oven(x0)).| == 1']}"
"There are 4 ovens","{'type':'query','expressions':['|exists x0 (oven(x0)).| >= 4']}"
"At least 2 cutting boards?","{'type':'query','expressions':['|exists x0 (cuttingBoard(x0)).| >= 2']}"
"There are at least twelve whisks","{'type':'query','expressions':['|exists x0 (whisk(x0)).| >= 12']}"
"There are at least nine whisks in the kitchen","{'type':'query','expressions':['|exists x0 (whisk(x0)).| >= 9']}"
"There are at most three broccoli stems","{'type':'query','expressions':['|exists x0 (broccoliStem(x0)).| <= 3']}"
"At most three broccoli stems","{'type':'query','expressions':['|exists x0 (broccoliStem(x0)).| <= 3']}"
"There are at most 7 spoons","{'type':'query','expressions':['|exists x0 (spoon(x0)).| <= 7']}"
"Less than 10 tea spoons","{'type':'query','expressions':['|exists x0 (teaSpoons(x0)).| < 10']}"
"There are less than five spatulas","{'type':'query','expressions':['|exists x0 (spatula(x0)).| < 5']}"
"There are more small bowls than large bowls","{'type':'query','expressions':['|exists x0 (smallBowl(x0)).| > |exists x0 (largeBowl(x0)).|']}"
"There are more bowls than baking trays","{'type':'query','expressions':['|exists x0 (bowl(x0)).| > |exists x0 (bakingTray(x0)).|']}"
"There are more onions than carrots and broccoli combined","{'type':'query','expressions':['|exists x0 (onion(x0)).| > |exists x0 (carrot(x0)).| + |exists x0 (broccoli(x0)).|']}"
"More green chili peppers than red chili peppers","{'type':'query','expressions':['|exists x0 (greenChiliPepper(x0)).| > |exists x0 (redChiliPepper(x0)).|']}"
"There are not more green chili peppers than red chili peppers","{'type':'query','expressions':['|exists x0 (greenChiliPepper(x0)).| <= |exists x0 (redChiliPepper(x0)).|']}"
"More small bowls than large bowls and medium bowls","{'type':'query','expressions':['|exists x0 (smallBowl(x0)).| > |exists x0 (largeBowl(x0)).| + |exists x0 (mediumBowl(x0)).|']}"
"There are less small bowls than large bowls and medium bowls","{'type':'query','expressions':['|exists x0 (smallBowl(x0)).| < |exists x0 (largeBowl(x0)).| + |exists x0 (mediumBowl(x0)).|']}"
"There are less apples than pears","{'type':'query','expressions':['|exists x0 (apple(x0)).| < |exists x0 (pear(x0)).|']}"
"There are less green chili peppers than red chili peppers","{'type':'query','expressions':['|exists x0 (greenChiliPepper(x0)).| < |exists x0 (redChiliPepper(x0)).|']}"
"There are many onions","{'type':'query','expressions':['|exists x0 (onion(x0)).| >= 10']}"
"many vegetables in the kitchen","{'type':'query','expressions':['|exists x0 (vegetable(x0)).| >= 10']}"
"There are a lot of carrots","{'type':'query','expressions':['|exists x0 (carrot(x0)).| >= 10']}"
"There are not many small bowls","{'type':'query','expressions':['|exists x0 (smallBowl(x0)).| < 10']}"
"There is a cup","{'type':'query','expressions':['|exists x0 (cup(x0)).| >= 1']}"
"There is exactly one cup","{'type':'query','expressions':['|exists x0 (cup(x0)).| == 1']}"
"There is only one cup","{'type':'query','expressions':['|exists x0 (cup(x0)).| == 1']}"
"There are several bread slices","{'type':'query','expressions':['|exists x0 (breadSlice(x0)).| >= 5']}"
"There are several doughnuts","{'type':'query','expressions':['|exists x0 (doughnut(x0)).| >= 5']}"
"Several apples in the kitchen","{'type':'query','expressions':['|exists x0 (apple(x0)).| >= 5']}"
"There are at least a few bananas","{'type':'query','expressions':['|exists x0 (banana(x0)).| >= 3']}"
"In the kitchen there are a few strawberries","{'type':'query','expressions':['|exists x0 (strawberry(x0)).| >= 3']}"
"There are a few potatoes","{'type':'query','expressions':['|exists x0 (potato(x0)).| >= 3']}"
"a few tomatoes","{'type':'query','expressions':['|exists x0 (tomato(x0)).| >= 3']}"
"There are only a few onions","{'type':'query','expressions':['|exists x0 (onion(x0)).| <= 3']}"
"There are quite a few onions","{'type':'query','expressions':['|exists x0 (onion(x0)).| <= 3']}"
"There are a couple of baby carrots","{'type':'query','expressions':['|exists x0 (babyCarrots(x0)).| >= 2']}"
"A couple of mangoes in the kitchen","{'type':'query','expressions':['|exists x0 (mango(x0)).| >= 2']}"
"A couple of tomatoes","{'type':'query','expressions':['|exists x0 (tomato(x0)).| >= 2']}"
"There are some red chili peppers","{'type':'query','expressions':['|exists x0 (redChiliPepper(x0)).| >= 4']}"
"There are some tomatoes","{'type':'query','expressions':['|exists x0 (tomato(x0)).| >= 4']}"
"In the kitchen there are some peppers","{'type':'query','expressions':['|exists x0 (pepper(x0)).| >= 4']}"
"There are some bananas","{'type':'query','expressions':['|exists x0 (banana(x0)).| >= 4']}"
"There are more than a few spatulas","{'type':'query','expressions':['|exists x0 (spatula(x0)).| > 3']}"
"There are 2 times more broccoli stems than forks","{'type':'query','expressions':['|exists x0 (broccoliStem(x0)).| == 2 * |exists x0 (fork(x0)).|']}"
"There are 3 times more potatoes than tomatoes","{'type':'query','expressions':['|exists x0 (potato(x0)).| == 3 * |exists x0 (tomato(x0)).|']}"
"Four times more tomatoes than potatoes","{'type':'query','expressions':['|exists x0 (tomato(x0)).| == 4 * |exists x0 (potato(x0)).|']}"
"The number of bananas is half the number of mangoes","{'type':'query','expressions':['|exists x0 (banana(x0)).| == |exists x0 (mango(x0)).| / 2']}"
"The number of apples is half the number of pears","{'type':'query','expressions':['|exists x0 (apple(x0)).| == |exists x0 (pear(x0)).| / 2']}"
"The number of bananas is less than half of the number of mangoes","{'type':'query','expressions':['|exists x0 (banana(x0)).| < |exists x0 (mango(x0)).| / 2']}"
"There are a few times more broccoli stems than cherry tomatoes","{'type':'query','expressions':['|exists x0 (broccoliStem(x0)).| >= 3 * |exists x0 (cherryTomato(x0)).|']}"
"There are half a dozen eggs","{'type':'query','expressions':['|exists x0 (egg(x0)).| >= 6']}"
"There are exactly half a dozen eggs","{'type':'query','expressions':['|exists x0 (egg(x0)).| == 6']}"
"There are exactly a dozen doughnuts","{'type':'query','expressions':['|exists x0 (doughnut(x0)).| == 12']}"
"There are a dozen eggs","{'type':'query','expressions':['|exists x0 (egg(x0)).| >= 12']}"
"A dozen eggs present in the kitchen","{'type':'query','expressions':['|exists x0 (egg(x0)).| >= 12']}"
"There are a half a dozen carrots","{'type':'query','expressions':['|exists x0 (carrot(x0)).| >= 6']}"
"There are less than a dozen of doughnuts","{'type':'query','expressions':['|exists x0 (doughnut(x0)).| < 12']}"
"How many baking trays are there?","{'type':'query','expressions':['|exists x0 (bakingTray(x0)).|']}"
"How many green chili peppers are there in the kitchen?","{'type':'query','expressions':['|exists x0 (greenChiliPepper(x0)).|']}"
"Tell me the number of avocados","{'type':'query','expressions':['|exists x0 (avocado(x0)).|']}"
"Count the number of onions","{'type':'query','expressions':['|exists x0 (onion(x0)).|']}"
"Count the carrots","{'type':'query','expressions':['|exists x0 (carrot(x0)).|']}"
"Count red onions","{'type':'query','expressions':['|exists x0 (redOnion(x0)).|']}"
"Check the number of avocados","{'type':'query','expressions':['|exists x0 (avocado(x0)).|']}"
"No vegetable is a carrot","{'type':'query','expressions':['|exists x0 (vegetable(x0) & carrot(x0)).| == 0']}"
"There are no onions","{'type':'query','expressions':['|exists x0 (onion(x0)).| == 0']}"
"No onions in the kitchen","{'type':'query','expressions':['|exists x0 (onion(x0)).| == 0']}"
"All vegetables are baby carrots","{'type':'query','expressions':['all x0 (vegetable(x0) -> babyCarrots(x0)).']}"
"All peppers are red chili peppers","{'type':'query','expressions':['all x0 (pepper(x0) -> redChiliPepper(x0)).']}"
"Every bowl is a large bowl","{'type':'query','expressions':['all x0 (bowl(x0) -> largeBowl(x0)).']}"
"All onions are not red onions","{'type':'query','expressions':['all x0 (onion(x0) -> -redOnion(x0)).']}"
"Every pepper is not a red pepper","{'type':'query','expressions':['all x0 (pepper(x0) -> -redPepper(x0)).']}"
"No cheese is feta cheese","{'type':'query','expressions':['|exists x0 (cheese(x0) & fetaCheese(x0)).| == 0']}"
"Not all cheese is feta cheese","{'type':'query','expressions':['exists x0 (cheese(x0) & -fetaCheese(x0)).' >= 1]}"
"Not every onion is a red onion","{'type':'query','expressions':['exists x0 (onion(x0) & -redOnion(x0)).' >= 1]}"
"Not every vegetable is an onion in the kitchen","{'type':'query','expressions':['exists x0 (vegetable(x0) & -onion(x0)).' >= 1]}"
"There are between 5 and 9 green chili peppers","{'type':'query','expressions':['5 <= |exists x0 (greenChiliPepper(x0)).| <= 9']}"
"There are between two and ten bananas","{'type':'query','expressions':['2 <= |exists x0 (banana(x0)).| <= 10']}"
"Between 15 and 17 peppers","{'type':'query','expressions':['15 <= |exists x0 (pepper(x0)).| <= 17']}"
"Between 1 and 21 tomatoes are present in the kitchen","{'type':'query','expressions':['1 <= |exists x0 (tomato(x0)).| <= 21']}"
"Onions","{'type':'invalid'}"
"Oven","{'type':'invalid'}"
"red chili peppers","{'type':'invalid'}"
"Vegetables","{'type':'invalid'}"
"Sing vegetables","{'type':'invalid'}"
"Weekend is great","{'type':'invalid'}"
"Blah blah blah","{'type':'invalid'}"
"I don't like eating pizza","{'type':'invalid'}"
"LAK ASJS ASA SJA","{'type':'invalid'}"
"Cut something","{'type':'invalid'}"
"Cut someone","{'type':'invalid'}"
"Fetch anything","{'type':'invalid'}"
"Transfer what you want","{'type':'invalid'}"
"Sprinkle that thing","{'type':'invalid'}"
"Bake those","{'type':'invalid'}"
"Line something","{'type':'invalid'}"
"I do not like olives","{'type':'invalid'}"
"Jump","{'type':'invalid'}"
"Do you listen to music?","{'type':'invalid'}"
"I am sad","{'type':'invalid'}"
"Lorem ipsum dolor sit amet","{'type':'invalid'}"
"I am not sure what I need","{'type':'invalid'}"
"Bake","{'type':'invalid'}"
"Cut","{'type':'invalid'}"
"Cook that there","{'type':'invalid'}"
"Line","{'type':'invalid'}"
"Fly now over the kitchen","{'type':'invalid'}"
"Sing for me","{'type':'invalid'}"
"Cry me a river","{'type':'invalid'}"
"Dance with an onion","{'type':'invalid'}"
"Run to the car","{'type':'invalid'}"
"I love swimming","{'type':'invalid'}"
"Buy me some tickets at a Dua Lipa concert","{'type':'invalid'}"
"Don't show up","{'type':'invalid'}"
"Follow the noise","{'type':'invalid'}"
"Jump now on the table","{'type':'invalid'}"
"Recommend me a movie","{'type':'invalid'}"
"Pay my rent","{'type':'invalid'}"
"Be careful","{'type':'invalid'}"
"Red Hot Chili Peppers will have a tour in Europe this year","{'type':'invalid'}"
"This sentence is only for training","{'type':'invalid'}"
"","{'type':'invalid'}"
"Fetch that","{'type':'invalid'}"
"Fetch zero onions","{'type':'invalid'}"
"Fetch no onions","{'type':'invalid'}"
"Bake 0 trays","{'type':'invalid'}"
"Cut 0 onions with any knife","{'type':'invalid'}"
"Shape 0 things","{'type':'invalid'}"
"Bake no bowls","{'type':'invalid'}"
"Cut no onions","{'type':'invalid'}"
"Mix nothing","{'type':'invalid'}"
"Do not cut onions","{'type':'invalid'}"
"Line no baking trays","{'type':'invalid'}"
"Cover zero baking trays","{'type':'invalid'}"
"Mix no large bowls","{'type':'invalid'}"
"Mix zero medium bowls","{'type':'invalid'}"
"Do not sprinkle sugar","{'type':'invalid'}"
"Shape nothing","{'type':'invalid'}"
"Shape no bowl","{'type':'invalid'}"
"Transfer nothing","{'type':'invalid'}"